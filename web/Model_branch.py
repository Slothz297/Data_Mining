import streamlit as st
import pandas as pd

from src.model_training import model_branch
from src.evaluation import evaluation_prophet, evaluation_xgb
from src.preprocessing import preprocess_data_branch

def run():
    st.markdown(
        """
        <script>
            window.scrollTo(0, 0);
        </script>
        """,
        unsafe_allow_html=True
    )
    st.title("D·ª± ƒëo√°n doanh thu chi nh√°nh")

    if st.button("‚¨ÖÔ∏è Quay l·∫°i trang ch√≠nh"):
        st.session_state.page = "dashboard"
        st.rerun()

    df = st.session_state.df
    st.dataframe(df.head(500), use_container_width=True, height=350)

    st.markdown("### Tham s·ªë m√¥ h√¨nh")
    time_pred = st.number_input("S·ªë th√°ng d·ª± ƒëo√°n", min_value=1, max_value=12, value=1, step=1)

    if st.button("Ch·∫°y m√¥ h√¨nh d·ª± ƒëo√°n doanh thu"):
        with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
            df_clean = preprocess_data_branch(df)
            result = model_branch(df_clean, time_pred)
            all_branch_forecasts = result["branch_forecast"]
            y_test = result["y_test"]
            y_pred = result["y_pred"]

        st.success("‚úÖ ƒê√£ hu·∫•n luy·ªán xong c·∫£ hai m√¥ h√¨nh!")

        # Prophet
        st.markdown("K·∫øt qu·∫£ d·ª± ƒëo√°n b·∫±ng Prophet")

        if not combined_forecast.empty:
            st.caption(f"T·ªïng s·ªë b·∫£n ghi d·ª± ƒëo√°n: {len(combined_forecast):,}")
            st.dataframe(
                combined_forecast.head(1000),
                use_container_width=True,
                height=400
            )

            with st.spinner("üîç ƒêang ƒë√°nh gi√° m√¥ h√¨nh Prophet..."):
                prophet_eval = evaluation_prophet(df_clean, combined_forecast)

            st.markdown("ƒê√°nh gi√° m√¥ h√¨nh Prophet")
            st.dataframe(prophet_eval, use_container_width=True, height=300)

            # Hi·ªÉn th·ªã th·ªëng k√™ t√≥m t·∫Øt
            avg_mae = prophet_eval["MAE"].mean()
            avg_rmse = prophet_eval["RMSE"].mean()
            avg_r2 = prophet_eval["R2"].mean()

            st.metric("MAE trung b√¨nh", f"{avg_mae:.2f}")
            st.metric("RMSE trung b√¨nh", f"{avg_rmse:.2f}")
            st.metric("R¬≤ trung b√¨nh", f"{avg_r2:.3f}")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá cho m√¥ h√¨nh Prophet.")

        # XGBoost
        st.markdown("---")
        st.subheader("K·∫øt qu·∫£ d·ª± ƒëo√°n b·∫±ng XGBoost")
        df_compare = pd.DataFrame({
            "Th·ª±c t·∫ø": y_test.values,
            "D·ª± ƒëo√°n": y_pred
        })
        st.dataframe(df_compare.tail(200), use_container_width=True, height=300)

        xgb_eval = evaluation_xgb(y_test, y_pred)
        st.dataframe(xgb_eval, use_container_width=True, height=200)
